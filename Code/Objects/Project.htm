<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Jun 13 22:10:42 2020
<BR><P>
<H3>Maximum Stack Usage =        748 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; update &rArr; rate &rArr; strcmp
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[1]">Undef_Handler</a>
 <LI><a href="#[2]">SWI_Handler</a>
 <LI><a href="#[3]">PAbt_Handler</a>
 <LI><a href="#[4]">DAbt_Handler</a>
 <LI><a href="#[5]">IRQ_Handler</a>
 <LI><a href="#[6]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">Undef_Handler</a><BR>
 <LI><a href="#[2]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">SWI_Handler</a><BR>
 <LI><a href="#[3]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">PAbt_Handler</a><BR>
 <LI><a href="#[4]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">DAbt_Handler</a><BR>
 <LI><a href="#[5]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">IRQ_Handler</a><BR>
 <LI><a href="#[6]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">IRQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2]">SWI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(RESET)
 <LI><a href="#[9]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[8]">main</a> from code.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[34]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[11]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[35]"></a>_main_clock</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[36]"></a>_main_cpp_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[37]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[38]"></a>__rt_final_cpp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[39]"></a>__rt_final_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__aeabi_uidivmod</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weight (via Veneer)
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate (via Veneer)
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate (via Veneer)
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>_memset$wrapper</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[31]"></a>strcmp</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate (via Veneer)
</UL>

<P><STRONG><a name="[c]"></a>__scatterload</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload (via Veneer)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload (via Veneer)
</UL>

<P><STRONG><a name="[40]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>Board_init</STRONG> (ARM, 76 bytes, Stack size 0 bytes, code.o(i.Board_init))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>LCD_CmdWrite</STRONG> (ARM, 48 bytes, Stack size 8 bytes, lcd.o(i.LCD_CmdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_CmdWrite &rArr; LCD_SendCmdSignals
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendHigherNibble
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendCmdSignals
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weight
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>LCD_DataWrite</STRONG> (ARM, 48 bytes, Stack size 8 bytes, lcd.o(i.LCD_DataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_DataWrite &rArr; LCD_SendDataSignals
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendHigherNibble
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendDataSignals
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayString
</UL>

<P><STRONG><a name="[17]"></a>LCD_DisplayString</STRONG> (ARM, 40 bytes, Stack size 8 bytes, lcd.o(i.LCD_DisplayString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_DisplayString &rArr; LCD_DataWrite &rArr; LCD_SendDataSignals
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weight
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>LCD_Init</STRONG> (ARM, 56 bytes, Stack size 4 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Init &rArr; LCD_CmdWrite &rArr; LCD_SendCmdSignals
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weight
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>LCD_Reset</STRONG> (ARM, 92 bytes, Stack size 4 bytes, lcd.o(i.LCD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Reset &rArr; LCD_SendCmdSignals
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendHigherNibble
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendCmdSignals
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14]"></a>LCD_SendCmdSignals</STRONG> (ARM, 52 bytes, Stack size 4 bytes, lcd.o(i.LCD_SendCmdSignals))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_SendCmdSignals
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>

<P><STRONG><a name="[16]"></a>LCD_SendDataSignals</STRONG> (ARM, 52 bytes, Stack size 4 bytes, lcd.o(i.LCD_SendDataSignals))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_SendDataSignals
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
</UL>

<P><STRONG><a name="[13]"></a>LCD_SendHigherNibble</STRONG> (ARM, 32 bytes, Stack size 0 bytes, lcd.o(i.LCD_SendHigherNibble))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>

<P><STRONG><a name="[2a]"></a>RTC_GetDateTime</STRONG> (ARM, 88 bytes, Stack size 0 bytes, code.o(i.RTC_GetDateTime))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>RTC_SetDateTime</STRONG> (ARM, 64 bytes, Stack size 0 bytes, code.o(i.RTC_SetDateTime))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c]"></a>Stepper_motor</STRONG> (ARM, 440 bytes, Stack size 16 bytes, code.o(i.Stepper_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Stepper_motor
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weight
</UL>

<P><STRONG><a name="[1e]"></a>__0sprintf$6</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[41]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[2b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weight (via Veneer)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update (via Veneer)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPrint (via Veneer)
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[20]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, printf1.o(i.__ARM_common_call_via_r2), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[24]"></a>__ARM_common_call_via_r6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, printfb.o(i.__ARM_common_call_via_r6), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>

<P><STRONG><a name="[42]"></a>__scatterload_copy</STRONG> (ARM, 28 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[43]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[44]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[33]"></a>adc</STRONG> (ARM, 220 bytes, Stack size 0 bytes, code.o(i.adc))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weight
</UL>

<P><STRONG><a name="[32]"></a>billprint</STRONG> (ARM, 64 bytes, Stack size 0 bytes, code.o(i.billprint))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
</UL>

<P><STRONG><a name="[19]"></a>delay_ms</STRONG> (ARM, 48 bytes, Stack size 0 bytes, lcd.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weight
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_motor
</UL>

<P><STRONG><a name="[1b]"></a>delay_us</STRONG> (ARM, 52 bytes, Stack size 0 bytes, lcd.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendDataSignals
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendCmdSignals
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
</UL>

<P><STRONG><a name="[25]"></a>keyboard</STRONG> (ARM, 920 bytes, Stack size 8 bytes, code.o(i.keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = keyboard &rArr; serialPrint &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weight
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>main</STRONG> (ARM, 1252 bytes, Stack size 120 bytes, code.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = main &rArr; update &rArr; rate &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayString
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weight
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPrintStr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateTime
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2e]"></a>rate</STRONG> (ARM, 144 bytes, Stack size 496 bytes, code.o(i.rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = rate &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp (via Veneer)
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
</UL>

<P><STRONG><a name="[26]"></a>serialPrint</STRONG> (ARM, 104 bytes, Stack size 72 bytes, code.o(i.serialPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = serialPrint &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard
</UL>

<P><STRONG><a name="[1d]"></a>serialPrintStr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, code.o(i.serialPrintStr))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weight
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_motor
</UL>

<P><STRONG><a name="[28]"></a>uart_init</STRONG> (ARM, 76 bytes, Stack size 0 bytes, code.o(i.uart_init))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>update</STRONG> (ARM, 332 bytes, Stack size 128 bytes, code.o(i.update))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = update &rArr; rate &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weight
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPrintStr
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;billprint
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>weight</STRONG> (ARM, 244 bytes, Stack size 120 bytes, code.o(i.weight))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = weight &rArr; keyboard &rArr; serialPrint &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayString
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPrintStr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_motor
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>_printf_core</STRONG> (Thumb, 792 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[22]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21]"></a>_printf_pre_padding</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
